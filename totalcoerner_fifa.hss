<?xml version="1.0" encoding="utf-8"?>
<SerializableScraperProject xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Version>28</Version>
  <Assignments>
    <Code>Main = {&#xD;
	Data.URLs -&gt; { url }&#xD;
	(Browser.Load {&#xD;
		url&#xD;
	})&#xD;
	Select.Juego&#xD;
	(@Core.Unit #{&#xD;
		fecha: {&#xD;
			Select.Fecha&#xD;
		}&#xD;
		time: {&#xD;
			Select.Time&#xD;
		}&#xD;
		score: {&#xD;
			Select.Score&#xD;
		}&#xD;
		home_score: {&#xD;
			Select.Score&#xD;
			Gather.Score_home&#xD;
			Gather.Number&#xD;
		}&#xD;
		away_score: {&#xD;
			Select.Score&#xD;
			Gather.Score_away&#xD;
		}&#xD;
		home: {&#xD;
			Select.Home&#xD;
			Gather.Country&#xD;
		}&#xD;
		home_player: {&#xD;
			Select.Home&#xD;
			Gather.Player&#xD;
		}&#xD;
		away: {&#xD;
			Select.Away&#xD;
			Gather.Country&#xD;
		}&#xD;
		away_player: {&#xD;
			Select.Away&#xD;
			Gather.Player&#xD;
		}&#xD;
	})&#xD;
}</Code>
  </Assignments>
  <TextGatherers />
  <Code>
    <Code />
  </Code>
  <HorizontalDatabase>
    <Schema xsi:type="SerializableObjectType">
      <Members>
        <SerializableObjectMember>
          <Name>Main</Name>
          <Type xsi:type="SerializableListType">
            <ItemType xsi:type="SerializableObjectType">
              <Members>
                <SerializableObjectMember>
                  <Name>fecha</Name>
                  <Type xsi:type="SerializableListType">
                    <ItemType xsi:type="SerializableSimpleType">
                      <Kind>String</Kind>
                    </ItemType>
                  </Type>
                </SerializableObjectMember>
                <SerializableObjectMember>
                  <Name>time</Name>
                  <Type xsi:type="SerializableListType">
                    <ItemType xsi:type="SerializableSimpleType">
                      <Kind>String</Kind>
                    </ItemType>
                  </Type>
                </SerializableObjectMember>
                <SerializableObjectMember>
                  <Name>score</Name>
                  <Type xsi:type="SerializableListType">
                    <ItemType xsi:type="SerializableSimpleType">
                      <Kind>String</Kind>
                    </ItemType>
                  </Type>
                </SerializableObjectMember>
                <SerializableObjectMember>
                  <Name>home_score</Name>
                  <Type xsi:type="SerializableListType">
                    <ItemType xsi:type="SerializableSimpleType">
                      <Kind>String</Kind>
                    </ItemType>
                  </Type>
                </SerializableObjectMember>
                <SerializableObjectMember>
                  <Name>away_score</Name>
                  <Type xsi:type="SerializableListType">
                    <ItemType xsi:type="SerializableSimpleType">
                      <Kind>String</Kind>
                    </ItemType>
                  </Type>
                </SerializableObjectMember>
                <SerializableObjectMember>
                  <Name>home</Name>
                  <Type xsi:type="SerializableListType">
                    <ItemType xsi:type="SerializableSimpleType">
                      <Kind>String</Kind>
                    </ItemType>
                  </Type>
                </SerializableObjectMember>
                <SerializableObjectMember>
                  <Name>home_player</Name>
                  <Type xsi:type="SerializableListType">
                    <ItemType xsi:type="SerializableSimpleType">
                      <Kind>String</Kind>
                    </ItemType>
                  </Type>
                </SerializableObjectMember>
                <SerializableObjectMember>
                  <Name>away</Name>
                  <Type xsi:type="SerializableListType">
                    <ItemType xsi:type="SerializableSimpleType">
                      <Kind>String</Kind>
                    </ItemType>
                  </Type>
                </SerializableObjectMember>
                <SerializableObjectMember>
                  <Name>away_player</Name>
                  <Type xsi:type="SerializableListType">
                    <ItemType xsi:type="SerializableSimpleType">
                      <Kind>String</Kind>
                    </ItemType>
                  </Type>
                </SerializableObjectMember>
              </Members>
            </ItemType>
          </Type>
        </SerializableObjectMember>
        <SerializableObjectMember>
          <Name>URLs</Name>
          <Type xsi:type="SerializableListType">
            <ItemType xsi:type="SerializableObjectType">
              <Members>
                <SerializableObjectMember>
                  <Name>url</Name>
                  <Type xsi:type="SerializableSimpleType">
                    <Kind>String</Kind>
                  </Type>
                </SerializableObjectMember>
              </Members>
            </ItemType>
          </Type>
        </SerializableObjectMember>
      </Members>
    </Schema>
  </HorizontalDatabase>
  <Kinds>
    <SerializableNamedPairOfString>
      <Name>Away</Name>
      <Value>{"title":{"val":null},"tag2":{"val":"TBODY"},"tag":{"val":"TD"},"id1":{"val":""},"classes3":{"val":"table table-striped table-bordered table-condensed table-hover background_table"},"tag3":{"val":"TABLE"},"color":{"val":"rgb(64, 64, 64)"},"header":{"val":"Away"},"id":{"val":""},"id2":{"val":""},"classes2":{"val":""},"visible":{"val":true},"classes":{"val":"text-left"},"classes1":{"val":""},"id3":{"val":""},"class3":{"table":true,"table-striped":true,"table-bordered":true,"table-condensed":true,"table-hover":true,"background_table":true},"tag1":{"val":"TR"},"colIndex":{"val":4},"font":{"val":"Helvetica, Arial, sans-serif"},"childrenLen":{"val":1},"class":{"text-left":true},"indexes":{"0":9,"2":3}}</Value>
    </SerializableNamedPairOfString>
    <SerializableNamedPairOfString>
      <Name>Fecha</Name>
      <Value>{"title":{"val":null},"tag2":{"val":"TBODY"},"tag":{"val":"TD"},"id1":{"val":""},"classes3":{"val":"table table-striped table-bordered table-condensed table-hover background_table"},"tag3":{"val":"TABLE"},"color":{"val":"rgb(64, 64, 64)"},"header":{"val":"start time"},"id":{"val":""},"id2":{"val":""},"classes2":{"val":""},"visible":{"val":true},"classes":{"val":"text-center"},"classes1":{"val":""},"id3":{"val":""},"class3":{"table":true,"table-striped":true,"table-bordered":true,"table-condensed":true,"table-hover":true,"background_table":true},"tag1":{"val":"TR"},"colIndex":{"val":0},"font":{"val":"Helvetica, Arial, sans-serif"},"childrenLen":{"val":0},"class":{"text-center":true},"indexes":{"0":1,"2":3}}</Value>
    </SerializableNamedPairOfString>
    <SerializableNamedPairOfString>
      <Name>Home</Name>
      <Value>{"title":{"val":null},"tag2":{"val":"TBODY"},"tag":{"val":"TD"},"id1":{"val":""},"classes3":{"val":"table table-striped table-bordered table-condensed table-hover background_table"},"tag3":{"val":"TABLE"},"color":{"val":"rgb(64, 64, 64)"},"header":{"val":"Home"},"id":{"val":""},"id2":{"val":""},"classes2":{"val":""},"visible":{"val":true},"classes":{"val":"text-right"},"classes1":{"val":""},"id3":{"val":""},"class3":{"table":true,"table-striped":true,"table-bordered":true,"table-condensed":true,"table-hover":true,"background_table":true},"tag1":{"val":"TR"},"colIndex":{"val":2},"font":{"val":"Helvetica, Arial, sans-serif"},"childrenLen":{"val":1},"class":{"text-right":true},"indexes":{"0":5,"2":3}}</Value>
    </SerializableNamedPairOfString>
    <SerializableNamedPairOfString>
      <Name>Juego</Name>
      <Value>{"title":{"val":null},"tag2":{"val":"TABLE"},"tag":{"val":"TR"},"id1":{"val":""},"classes3":{"val":"col-sm-10"},"tag3":{"val":"DIV"},"color":{"val":"rgb(64, 64, 64)"},"id":{"val":""},"class2":{"table":true,"table-striped":true,"table-bordered":true,"table-condensed":true,"table-hover":true,"background_table":true},"id2":{"val":""},"classes2":{"val":"table table-striped table-bordered table-condensed table-hover background_table"},"visible":{"val":true},"classes":{"val":""},"classes1":{"val":""},"id3":{"val":""},"class3":{"col-sm-10":true},"tag1":{"val":"TBODY"},"font":{"val":"Helvetica, Arial, sans-serif"},"childrenLen":{"val":15},"indexes":{"1":3,"2":7}}</Value>
    </SerializableNamedPairOfString>
    <SerializableNamedPairOfString>
      <Name>Next</Name>
      <Value>{"class3":{"col-sm-10":true},"text":{"val":"Â»"},"id1":{"val":""},"class2":{"pagination":true,"pull-right":true},"classes2":{"val":"pagination pull-right"},"title":{"val":null},"tag3":{"val":"DIV"},"id2":{"val":""},"classes3":{"val":"col-sm-10"},"childrenLen":{"val":0},"color":{"val":"rgb(66, 139, 202)"},"tag2":{"val":"UL"},"classes":{"val":""},"tag":{"val":"A"},"prevText":{"val":"9"},"id":{"val":""},"classes1":{"val":""},"id3":{"val":""},"font":{"val":"Helvetica, Arial, sans-serif"},"visible":{"val":true},"indexes":{"0":0,"1":10,"2":9},"tag1":{"val":"LI"},"_tolerance":{"val":0.044}}</Value>
    </SerializableNamedPairOfString>
    <SerializableNamedPairOfString>
      <Name>Score</Name>
      <Value>{"title":{"val":null},"tag2":{"val":"TBODY"},"tag":{"val":"TD"},"id1":{"val":""},"classes3":{"val":"table table-striped table-bordered table-condensed table-hover background_table"},"tag3":{"val":"TABLE"},"color":{"val":"rgb(66, 139, 202)"},"header":{"val":"Score"},"id":{"val":""},"id2":{"val":""},"classes2":{"val":""},"visible":{"val":true},"classes":{"val":"text-center match_goal"},"classes1":{"val":""},"id3":{"val":""},"class3":{"table":true,"table-striped":true,"table-bordered":true,"table-condensed":true,"table-hover":true,"background_table":true},"tag1":{"val":"TR"},"colIndex":{"val":3},"font":{"val":"Helvetica, Arial, sans-serif"},"childrenLen":{"val":0},"class":{"text-center":true,"match_goal":true},"indexes":{"0":7,"2":3}}</Value>
    </SerializableNamedPairOfString>
    <SerializableNamedPairOfString>
      <Name>Time</Name>
      <Value>{"title":{"val":null},"tag2":{"val":"TBODY"},"tag":{"val":"TD"},"id1":{"val":""},"classes3":{"val":"table table-striped table-bordered table-condensed table-hover background_table"},"tag3":{"val":"TABLE"},"color":{"val":"rgb(255, 0, 0)"},"header":{"val":""},"id":{"val":""},"id2":{"val":""},"classes2":{"val":""},"visible":{"val":true},"classes":{"val":"text-center match_status"},"classes1":{"val":""},"id3":{"val":""},"class3":{"table":true,"table-striped":true,"table-bordered":true,"table-condensed":true,"table-hover":true,"background_table":true},"tag1":{"val":"TR"},"colIndex":{"val":1},"font":{"val":"Helvetica, Arial, sans-serif"},"childrenLen":{"val":0},"class":{"text-center":true,"match_status":true},"indexes":{"0":3,"2":3}}</Value>
    </SerializableNamedPairOfString>
  </Kinds>
  <Extractors>
    <SerializableGatherer>
      <Name>Country</Name>
      <Value>return function(element, global) {&#xD;&#xD;
	const text = element.innerText;&#xD;&#xD;
	const regex = /(\w+)\s+\((\w+)\)/;&#xD;&#xD;
	const match = regex.exec(text);&#xD;&#xD;
	if (match) {&#xD;&#xD;
    	const country = match[1];&#xD;&#xD;
    	const player = match[2];&#xD;&#xD;
		return country;&#xD;&#xD;
	}&#xD;&#xD;
};</Value>
      <Visible>true</Visible>
      <Locked>false</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>HTML</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    return element.nodeType === 1 ? element.outerHTML : element.nodeValue;&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>true</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Link</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    var upperTag = function (element) {&#xD;&#xD;
        return element.tagName ? element.tagName.toUpperCase() : element.tagName;&#xD;&#xD;
    };&#xD;&#xD;
&#xD;&#xD;
    var linkOf = function (element) {&#xD;&#xD;
        return element &amp;&amp; element.href &amp;&amp; (element.protocol === "http:" || element.protocol === "https:" || element.protocol == "file:" || element.protocol == "ftp:") ? element.href : null;&#xD;&#xD;
    };&#xD;&#xD;
&#xD;&#xD;
    var original = element;&#xD;&#xD;
&#xD;&#xD;
    while (element &amp;&amp; (!element.tagName || upperTag(element) !== 'A'))&#xD;&#xD;
        element = element.parentNode;&#xD;&#xD;
&#xD;&#xD;
    var result = linkOf(element);&#xD;&#xD;
&#xD;&#xD;
    if (!result) {&#xD;&#xD;
        if (original.children.length == 1) {&#xD;&#xD;
            var child = original.children[0];&#xD;&#xD;
&#xD;&#xD;
            if (upperTag(child) === 'A') {&#xD;&#xD;
                result = linkOf(child);&#xD;&#xD;
&#xD;&#xD;
                if (!result) {&#xD;&#xD;
                    if (child.children.length == 1) {&#xD;&#xD;
                        child = child.children[0];&#xD;&#xD;
&#xD;&#xD;
                        if (upperTag(child) === 'A')&#xD;&#xD;
                            result = linkOf(child);&#xD;&#xD;
                    }&#xD;&#xD;
                }&#xD;&#xD;
            }&#xD;&#xD;
        }&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    return result;&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>true</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Number</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    var getText = function () {&#xD;&#xD;
        return element.nodeType === 1 ? element.innerText : element.nodeValue;&#xD;&#xD;
    };&#xD;&#xD;
&#xD;&#xD;
    var regex = /-?(?=[1-9]|0(?!\d))[\d\,]+(\.\d+)?/;&#xD;&#xD;
    var first = regex.exec(getText(element));&#xD;&#xD;
    return first &amp;&amp; first.length ? first[0] : null;&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>OwnText</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    var text = [].reduce.call(element.childNodes || [], (a, b) =&gt; a + (b.nodeType === 3 ? b.textContent : ''), '');&#xD;&#xD;
    return text.trim();&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Path</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    return window.___getPath(element);&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Player</Name>
      <Value>return function(element, global) {&#xD;&#xD;
	const text = element.innerText;&#xD;&#xD;
	const regex = /(\w+)\s+\((\w+)\)/;&#xD;&#xD;
	const match = regex.exec(text);&#xD;&#xD;
	if (match) {&#xD;&#xD;
    	const country = match[1];&#xD;&#xD;
    	const player = match[2];&#xD;&#xD;
		return player;&#xD;&#xD;
	}&#xD;&#xD;
};</Value>
      <Visible>true</Visible>
      <Locked>false</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Score_away</Name>
      <Value>return function(element, global) {&#xD;&#xD;
	var marcador = element.innerText;&#xD;&#xD;
	if (marcador.indexOf('-') === -1)&#xD;&#xD;
		return '';&#xD;&#xD;
	marcador = marcador.replace(/^\[|\]$|^\(|\)$/g, '');&#xD;&#xD;
	var list_marcador = marcador.split('-');&#xD;&#xD;
	var home = list_marcador[1].trim();&#xD;&#xD;
	return home;&#xD;&#xD;
};</Value>
      <Visible>true</Visible>
      <Locked>false</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Score_home</Name>
      <Value>return function(element, global) {&#xD;&#xD;
	var marcador = element.innerText;&#xD;&#xD;
	if (marcador.indexOf('-') === -1)&#xD;&#xD;
		return '';&#xD;&#xD;
	marcador = marcador.replace(/^\[|\]$|^\(|\)$/g, '');&#xD;&#xD;
	var list_marcador = marcador.split('-');&#xD;&#xD;
	var home = list_marcador[0].trim();&#xD;&#xD;
	return home;&#xD;&#xD;
};</Value>
      <Visible>true</Visible>
      <Locked>false</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Src</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    return element.src || "";&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Tag</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    var upperTag = function (element) {&#xD;&#xD;
        return element.nodeType === 1 ? element.tagName.toUpperCase() : "HS-NODE";&#xD;&#xD;
    };&#xD;&#xD;
&#xD;&#xD;
    return upperTag(element);&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Text</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    var upperTag = function (element) {&#xD;&#xD;
        return element.tagName ? element.tagName.toUpperCase() : element.tagName;&#xD;&#xD;
    };&#xD;&#xD;
&#xD;&#xD;
    var getElementText = function (e) {&#xD;&#xD;
        switch (upperTag(e)) {&#xD;&#xD;
            case 'SELECT':&#xD;&#xD;
                if (e.selectedOptions &amp;&amp; e.selectedOptions.length === 1)&#xD;&#xD;
                    return e.selectedOptions[0].innerText;&#xD;&#xD;
            default:&#xD;&#xD;
                return e.innerText;&#xD;&#xD;
        }&#xD;&#xD;
    };&#xD;&#xD;
&#xD;&#xD;
    var text = element.nodeType === 1 ? getElementText(element) : element.nodeValue;&#xD;&#xD;
    return text ? text.trim() : "";&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>true</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>URL</Name>
      <Value>var result =  function (element) {&#xD;&#xD;
    return element.ownerDocument.defaultView.location.href;&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Value</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    return element.value || element.getAttribute('value');&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.noCache = false;&#xD;&#xD;
return result;&#xD;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
  </Extractors>
  <KindGatherers>
    <SerializableGatherer>
      <Name>childrenLen</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    return { val: element.nodeType === 1 ? element.children.length : 0 };&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.7; // Default&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>class</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    if (element.nodeType !== 1)&#xD;&#xD;
        element = element.parentElement;&#xD;&#xD;
&#xD;&#xD;
    var result = {};&#xD;&#xD;
    var list = element.classList;&#xD;&#xD;
    var len = list.length;&#xD;&#xD;
&#xD;&#xD;
    for (var i = 0; i &lt; len; i++)&#xD;&#xD;
        result[list[i]] = true;&#xD;&#xD;
&#xD;&#xD;
    return result;&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.73;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>class1</Name>
      <Value>var result = window.___makeRelatedGatherer('class', function (element) {&#xD;&#xD;
    return element.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 0.87;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>class2</Name>
      <Value>var result = window.___makeRelatedGatherer('class', function (element) {&#xD;&#xD;
    return element.parentNode.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 0.87;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>class3</Name>
      <Value>var result = window.___makeRelatedGatherer('class', function (element) {&#xD;&#xD;
    return element.parentNode.parentNode.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 0.9;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>classes</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    if (element.nodeType !== 1)&#xD;&#xD;
        element = element.parentElement;&#xD;&#xD;
&#xD;&#xD;
    return { val: typeof element.className === 'string' ? element.className : null };&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.91;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>classes1</Name>
      <Value>var result = window.___makeRelatedGatherer('classes', function (element) {&#xD;&#xD;
    return element.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 0.95;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>classes2</Name>
      <Value>var result = window.___makeRelatedGatherer('classes', function (element) {&#xD;&#xD;
    return element.parentNode.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 0.95;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>classes3</Name>
      <Value>var result = window.___makeRelatedGatherer('classes', function (element) {&#xD;&#xD;
    return element.parentNode.parentNode.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 0.81;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>colIndex</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    var maxUp = 5;&#xD;&#xD;
&#xD;&#xD;
    function closestTd(element) {&#xD;&#xD;
        for (var up = 0; up &lt; maxUp; up++) {&#xD;&#xD;
            if (!element) return null;&#xD;&#xD;
            if (/^t[dh]$/i.test(element.nodeName))&#xD;&#xD;
                return element;&#xD;&#xD;
            element = element.parentNode;&#xD;&#xD;
        }&#xD;&#xD;
&#xD;&#xD;
        return null;&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    function colSpan(col) {&#xD;&#xD;
        return parseInt((col &amp;&amp; col.nodeType == 1 &amp;&amp; /^t[dh]$/i.test(element.nodeName)) ? (col.getAttribute('colSpan') || 1) : 0);&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    function endIndex(element) {&#xD;&#xD;
        var colPos = colSpan(element);&#xD;&#xD;
&#xD;&#xD;
        while (element) {&#xD;&#xD;
            element = element.previousSibling;&#xD;&#xD;
            colPos += colSpan(element);&#xD;&#xD;
        }&#xD;&#xD;
&#xD;&#xD;
        return colPos;&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    element = closestTd(element);&#xD;&#xD;
&#xD;&#xD;
    if (element)&#xD;&#xD;
        return { val: endIndex(element.previousSibling) };&#xD;&#xD;
    else&#xD;&#xD;
        return {};&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.7; // Default&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>color</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    if (element.nodeType !== 1)&#xD;&#xD;
        element = element.parentElement;&#xD;&#xD;
&#xD;&#xD;
    return { val: window.getComputedStyle(element).color };&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 1;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>font</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    if (element.nodeType !== 1)&#xD;&#xD;
        element = element.parentElement;&#xD;&#xD;
&#xD;&#xD;
    return { val: window.getComputedStyle(element)['font-family'] };&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 1;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>header</Name>
      <Value>var result = function header(element) {&#xD;&#xD;
    var upperTag = function (element) {&#xD;&#xD;
        return element.tagName ? element.tagName.toUpperCase() : element.tagName;&#xD;&#xD;
    };&#xD;&#xD;
&#xD;&#xD;
    var getColumnIndex = function (e) {&#xD;&#xD;
        var maxLevels = 4;&#xD;&#xD;
&#xD;&#xD;
        while (e &amp;&amp; upperTag(e) !== 'TD' &amp;&amp; maxLevels &gt; 0) {&#xD;&#xD;
            e = e.parentElement;&#xD;&#xD;
            maxLevels--;&#xD;&#xD;
        }&#xD;&#xD;
&#xD;&#xD;
        if (e &amp;&amp; upperTag(e) === 'TD') {&#xD;&#xD;
            var index = 0;&#xD;&#xD;
            while ((e = e.previousElementSibling)) {&#xD;&#xD;
                index += e.colSpan || 1;&#xD;&#xD;
            }&#xD;&#xD;
            return index;&#xD;&#xD;
        }&#xD;&#xD;
        else&#xD;&#xD;
            return -1;&#xD;&#xD;
    };&#xD;&#xD;
&#xD;&#xD;
    var colIndex = getColumnIndex(element);&#xD;&#xD;
&#xD;&#xD;
    if (colIndex !== -1) {&#xD;&#xD;
        while (element &amp;&amp; upperTag(element) !== 'TABLE')&#xD;&#xD;
            element = element.parentElement;&#xD;&#xD;
&#xD;&#xD;
        if (element &amp;&amp; upperTag(element) === 'TABLE') {&#xD;&#xD;
            var tds = element.querySelectorAll('th,thead td');&#xD;&#xD;
            var index = 0;&#xD;&#xD;
&#xD;&#xD;
            for (var td of tds) {&#xD;&#xD;
                index += td.colSpan || 1;&#xD;&#xD;
&#xD;&#xD;
                if (index &gt; colIndex) &#xD;&#xD;
                    return { val: (td.innerText || "").trim() };&#xD;&#xD;
            }&#xD;&#xD;
        }&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    return {};&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.9;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>id</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    if (element.nodeType !== 1)&#xD;&#xD;
        element = element.parentElement;&#xD;&#xD;
&#xD;&#xD;
    return { val: element.id };&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.98;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>id1</Name>
      <Value>var result = window.___makeRelatedGatherer('id', function (element) {&#xD;&#xD;
    return element.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 0.91;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>id2</Name>
      <Value>var result = window.___makeRelatedGatherer('id', function (element) {&#xD;&#xD;
    return element.parentNode.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 0.91;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>id3</Name>
      <Value>var result = window.___makeRelatedGatherer('id', function (element) {&#xD;&#xD;
    return element.parentNode.parentNode.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 0.88;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>indexes</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    function getElementIndex(node) {&#xD;&#xD;
        var index = 0;&#xD;&#xD;
        while ((node = node.previousSibling)) {&#xD;&#xD;
            index++;&#xD;&#xD;
        }&#xD;&#xD;
        return index;&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    var result = {};&#xD;&#xD;
    var level = 0;&#xD;&#xD;
    var levels = 3;&#xD;&#xD;
&#xD;&#xD;
    while (element &amp;&amp; level &lt; levels) {&#xD;&#xD;
        result[level] = getElementIndex(element);&#xD;&#xD;
        level++;&#xD;&#xD;
        element = element.parentElement&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    return result;&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.86;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>names</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    function getElementName(node) {&#xD;&#xD;
        return node.nodeType === 1 ? (node.name || node.getAttribute('name')) : null;&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    var result = {};&#xD;&#xD;
    var level = 0;&#xD;&#xD;
    var levels = 3;&#xD;&#xD;
&#xD;&#xD;
    while (element &amp;&amp; level &lt; levels) {&#xD;&#xD;
        var name = getElementName(element);&#xD;&#xD;
        if (name) result[level] = name;&#xD;&#xD;
        level++;&#xD;&#xD;
        element = element.parentElement&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    return result;&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.75;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>prevText</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    var prevTextOf = function (e) {&#xD;&#xD;
        var maxDepth = 0;&#xD;&#xD;
        var maxLength = 128;&#xD;&#xD;
&#xD;&#xD;
        while (e &amp;&amp; !e.previousElementSibling &amp;&amp; maxDepth &gt; 0) {&#xD;&#xD;
            e = e.parentElement;&#xD;&#xD;
            maxDepth--;&#xD;&#xD;
        }&#xD;&#xD;
&#xD;&#xD;
        if (e &amp;&amp; e.previousElementSibling) {&#xD;&#xD;
            var fullText = e.previousElementSibling.innerText;&#xD;&#xD;
&#xD;&#xD;
            if (fullText.length &lt; maxLength)&#xD;&#xD;
                return { val: fullText };&#xD;&#xD;
&#xD;&#xD;
        }&#xD;&#xD;
&#xD;&#xD;
        return null;&#xD;&#xD;
    }&#xD;&#xD;
&#xD;&#xD;
    var maxParents = 3;&#xD;&#xD;
&#xD;&#xD;
    do {&#xD;&#xD;
        var prevText = prevTextOf(element);&#xD;&#xD;
&#xD;&#xD;
        if (prevText)&#xD;&#xD;
            return prevText;&#xD;&#xD;
&#xD;&#xD;
        if (element.parentElement &amp;&amp; maxParents &gt; 0) {&#xD;&#xD;
            element = element.parentElement;&#xD;&#xD;
            maxParents--;&#xD;&#xD;
        }&#xD;&#xD;
        else&#xD;&#xD;
            return null;&#xD;&#xD;
    }&#xD;&#xD;
    while (true);&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.7; // Default&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>tag</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    var upperTag = function (element) {&#xD;&#xD;
        return element.nodeType === 1 ? element.tagName.toUpperCase() : "HS-NODE";&#xD;&#xD;
    };&#xD;&#xD;
&#xD;&#xD;
    return { val: upperTag(element) };&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 1;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>tag1</Name>
      <Value>var result = window.___makeRelatedGatherer('tag', function (element) {&#xD;&#xD;
    return element.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 1;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>tag2</Name>
      <Value>var result = window.___makeRelatedGatherer('tag', function (element) {&#xD;&#xD;
    return element.parentNode.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 1;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>tag3</Name>
      <Value>var result = window.___makeRelatedGatherer('tag', function (element) {&#xD;&#xD;
    return element.parentNode.parentNode.parentNode;&#xD;&#xD;
});&#xD;&#xD;
&#xD;&#xD;
result.score = 1;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>text</Name>
      <Value>var result = function (element) {&#xD;&#xD;
&#xD;&#xD;
    if (element.nodeType !== 1)&#xD;&#xD;
        return null;&#xD;&#xD;
&#xD;&#xD;
    if (window.___textTags.has(element.tagName.toUpperCase()))&#xD;&#xD;
        return null;&#xD;&#xD;
&#xD;&#xD;
    var text = element.innerText;&#xD;&#xD;
&#xD;&#xD;
    if (!text)&#xD;&#xD;
        text = (element.querySelector('svg title') || {}).innerHTML;&#xD;&#xD;
&#xD;&#xD;
    if (text &amp;&amp; text.length &gt; 100)&#xD;&#xD;
        return null;&#xD;&#xD;
&#xD;&#xD;
    return { val: text };&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.2;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>title</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    if (element.nodeType !== 1)&#xD;&#xD;
        element = element.parentElement;&#xD;&#xD;
&#xD;&#xD;
    return { val: element.getAttribute('title') };&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 0.7;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>visible</Name>
      <Value>var result = function (element) {&#xD;&#xD;
    if (element.nodeType !== 1)&#xD;&#xD;
        element = element.parentElement;&#xD;&#xD;
&#xD;&#xD;
    return { val: element.offsetParent !== null };&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
result.score = 1;&#xD;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
  </KindGatherers>
  <Scripts />
  <Queries />
  <JsonReaders />
  <AjaxReaders />
  <Settings />
  <BlockList>*://*.doubleclick.net/*&#xD;
*://*.amazon-adsystem.com/*&#xD;
*://*.google-analytics.com/*&#xD;
*://*.googlesyndication.com/*&#xD;
*://*.advertising.com/*&#xD;
*://*.imrworldwide.com/*&#xD;
*://*.quantserve.com/*&#xD;
*://*.googleadservices.com/*&#xD;
*://*.scorecardresearch.com/*</BlockList>
  <DynamicInject />
  <ProjectCode>8437c0eb3f904cf2d5f8be5dde84a39d</ProjectCode>
</SerializableScraperProject>